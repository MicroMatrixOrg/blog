<template>
  <!-- 分享到教研组的modal框 -->
  <div class="up-dowm-components" >
    <!--自定义提示-->
          <SelectTree :props="props" :options="list" :value="valueId" :clearable="isClearable" :accordion="isAccordion"
            @getValue="getValue($event)" />
    <!--自定义提示结束-->
  </div>
</template>

<script>
import SelectTree from "@/components/ztree/treeSelect.vue";
export default {
  components: {
    SelectTree
  },
  props: {
    title: {
      //Moal框title
      type: String
    }
  },
  data() {
    return {
      showModalStatus: false, //弹框是否显示
      formMainData: {
        name: "0", //
        name2: "" //
      },
      ruleValidate: {
        name: [
          {
            required: false,
            message: "Please select name",
            trigger: "change"
          }
        ],
        name2: [
          {
            required: false,
            message: "请选择",
            trigger: "change",
            type: "number"
          }
        ]
      },
      showModalType: 0, // 0添加，1编辑 判断这个modal弹框是添加还是编辑
      /**下拉框树结构的参数 start*/
      isClearable: true, // 可清空（可选）
      isAccordion: true, // 可收起（可选）
      valueId: 20, // 初始ID（可选）
      props: {
        // 配置项（必选）
        value: "id",
        label: "name",
        children: "children"
        // disabled:true
      },
      // 选项列表（必选）
      list: [
        {
          id: 1,
          parentId: 0,
          name: "一级菜单A",
          rank: 1,
          children: [
            {
              id: 4,
              parentId: 1,
              name: "二级菜单A-A",
              rank: 2,
              children: [
                {
                  id: 7,
                  parentId: 4,
                  name: "三级菜单A-A-A",
                  rank: 3,
                  children: [
                    {
                      id: 8,
                      parentId: 7,
                      name: "四级菜单A-A-A-A",
                      rank: 4,
                      children: [
                        {
                          id: 9,
                          parentId: 8,
                          name: "五级菜单A-A-A-A-A",
                          rank: 5,
                          children: [
                            {
                              id: 10,
                              parentId: 9,
                              name: "六级菜单A-A-A-A-A-A",
                              rank: 6,
                              children: [
                                {
                                  id: 11,
                                  parentId: 10,
                                  name: "七级菜单A-A-A-A-A-A-A",
                                  rank: 7,
                                  children: [
                                    {
                                      id: 12,
                                      parentId: 11,
                                      name: "八级菜单A-A-A-A-A-A-A-A",
                                      rank: 8,
                                      children: [
                                        {
                                          id: 13,
                                          parentId: 12,
                                          name: "九级菜单A-A-A-A-A-A-A-A-A",
                                          rank: 9,
                                          children: [
                                            {
                                              id: 14,
                                              parentId: 13,
                                              name:
                                                "十级菜单A-A-A-A-A-A-A-A-A-A",
                                              rank: 10
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              id: 5,
              parentId: 1,
              name: "二级菜单A-B",
              rank: 2
            }
          ]
        },
        {
          id: 2,
          parentId: 0,
          name: "一级菜单B",
          rank: 1,
          children: [
            {
              id: 6,
              parentId: 2,
              name: "二级菜单B-A",
              rank: 2
            }
          ]
        },
        {
          id: 3,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 15,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 16,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 17,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 18,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 19,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 20,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 21,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 22,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 23,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 24,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 25,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 26,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 27,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 28,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 29,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 30,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 31,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 32,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 33,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 34,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 35,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 36,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 37,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 38,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 39,
          parentId: 0,
          name: "一级菜单C",
          rank: 1
        },
        {
          id: 40,
          parentId: 0,
          name: "一级菜单end",
          rank: 1
        }
      ]
      /**下拉框树结构的参数 end*/
    };
  },
  watch: {},
  computed: {
    /* 转树形数据 */
    // optionData(){
    //   let cloneData = JSON.parse(JSON.stringify(this.list))      // 对源数据深度克隆
    //   return  cloneData.filter(father=>{                      // 循环所有项，并添加children属性
    //       let branchArr = cloneData.filter(child=>father.id == child.parentId);       // 返回每一项的子级数组
    //       branchArr.length>0 ? father.children=branchArr : ''   //给父级添加一个children属性，并赋值
    //       return father.parentId==0;      //返回第一层
    //   });
    // }
  },
  methods: {
    /**初始化组件 */
    initComponents() {
      var _this = this;
      _this.showModalStatus = true;
    },
    /**文件下载路径 */
    ExcelDownloadUserCb() {
      location.href = this.fileDownloadUrl;
    },
    /**上传格式错误提示 */
    handleFormatError() {
      // this.$emit("handleFormatError", file.name);
      var arr = this.formatArr;
      this.msg = "仅支持 " + arr.join(",") + "格式";
      this.$Notice.info({
        title: "不支持的上传类型！",
        desc: "请上传指定的文件类型"
      });
    },
    /**上传成功的回调 */
    encloSuccess(resp, file) {
      var _this = this;
      if (resp.code == 0) {
        _this.$Message.info("上传成功");
        _this.$emit("encloSuccess", resp, file);
      } else {
        _this.$Message.info(resp.msg);
      }
    },
    /**上传成功的回调 */
    encloSuccess2(resp, file) {
      var _this = this;
      if (resp.code == 0) {
        _this.$Message.info("上传成功");
        _this.$emit("encloSuccess2", resp, file);
      } else {
        _this.$Message.info(resp.msg);
      }
    },
    visibleChange(val) {
      this.$emit("visibleChange", val);
    },
    handleUploadBefore(file) {
      var _this = this;
      _this.file = file;
      _this.formMainData.name = file.name;
      return false; //阻止图片继续上传，使得form表单提交时统一上传
    },
    handleUploadBefore2(file) {
      var _this = this;
      _this.file2 = file;
      _this.formMainData.name2 = file.name;
      return false; //阻止图片继续上传，使得form表单提交时统一上传
    },
    handleSubmit(name) {
      var _this = this;
      // _this.$refs.uploadFile.post(this.file);
      // _this.$refs.uploadFile2.post(this.file2);
      // _this.formMainData.name2='';
      // _this.formMainData.name='';
      _this.formMainData.subjectName = _this.xkList.filter(function(ele) {
        if (ele.subId == _this.formMainData.name4) {
          return ele;
        }
      })[0].name;
      _this.$emit("handleSubmit2", this.formMainData);
      _this.showModalStatus = false;
    },
    handleReset() {
      var _this = this;
      _this.formMainData.name2 = "";
      _this.formMainData.name = "";
      this.showModalStatus = false;
    },
    // 取值
    getValue(value) {
      this.valueId = value;
      console.log(this.valueId);
    }
  }
};
</script>
<style lang="scss">
#modal-shareFile {
  // 确认弹出框覆盖
  .up-dowm-components {
    .xinghao_style {
      content: "*";
      display: inline-block;
      margin-right: 4px;
      line-height: 1;
      font-family: SimSun;
      font-size: 12px;
      color: #ed4014;
      float: left;
      line-height: 30px;
    }

    .up-button-class {
      border: 1px solid #659afe;
      color: #659afe;
    }

    .ivu-modal-header p,
    .ivu-modal-header-inner {
      font-size: 13px;
    }
  }

  .icon-class {
    font-size: 30px;
    color: #5693ed;
    width: 30px;
    float: left;
    line-height: 100px;
    line-height: 76px;
  }
  .fxwj-title {
    float: left;
    margin-left: 10px;
  }
  .fxwjt-1 {
    font-weight: bold;
  }
  .fxwjt-2 {
  }
}
</style>
