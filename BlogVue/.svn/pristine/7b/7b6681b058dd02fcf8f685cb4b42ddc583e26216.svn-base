<template>
    <div>
        <!-- 日期按钮组合 -->
        <ButtonGroup>
            <Button :type="currentType == 3 ? 'primary':'default'" @click="setType(3)">今日</Button>
            <Button :type="currentType == 4 ? 'primary':'default'" @click="setType(4)">本周</Button>
            <Button :type="currentType == 5 ? 'primary':'default'" @click="setType(5)">本月</Button>
            <Button :type="currentType == 0 ? 'primary':'default'" @click="setType(0)">本学期</Button>
            <Button :type="currentType == 1 ? 'primary':'default'" @click="setType(1)">{{new Date().getFullYear()}}年</Button>
            <Button :type="currentType == 2 ? 'primary':'default'" @click="setType(2)">累计</Button>
            <Button :type="currentType == 6 ? 'primary':'default'" @click="setType(6)">自定义</Button>
        </ButtonGroup>
        <DatePicker :value="dateTime" @on-change="getDate" v-show="currentType == 6" type="daterange" :options="options2" placement="bottom-end" placeholder="选择时间范围" style="width: 200px"></DatePicker>
    </div>
</template>

<script>
export default {
  props: {
    initType: {
      type: Number,
      default: () => {
        return 3;
      }
    }
  },
  data() {
    return {
      currentType: 3,
      options2: {
        shortcuts: [
          {
            text: "前三月",
            value() {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 90);
              return [start, end];
            }
          },
          {
            text: "前半年",
            value() {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 183);
              return [start, end];
            }
          },
          {
            text: "前一年",
            value() {
              const end = new Date();
              const start = new Date();
              start.setTime(start.getTime() - 3600 * 1000 * 24 * 365);
              return [start, end];
            }
          }
        ]
      },
      dateTime: []
    };
  },
  mounted() {
    const _this = this;
    _this.currentType = _this.initType;
  },
  methods: {
    setInitDate(val) {
      const _this = this;
      _this.currentType = val.dateType;
      if (val.dateType == 6) {
        _this.dateTime = [val.dateTime.startTime, val.dateTime.endTime];
      }
    },
    getDate(val) {
      // this.customTime = [...val];
      this.$emit("currentDate", val);
    },
    setType(val) {
      this.currentType = val;
      let date = val;
      // console.log(val);
      if (val != 6) {
        this.$emit("currentDate", date);
      }
      // console.log(date);
    }
  }
};
</script>

<style lang="scss" scoped>
</style>


