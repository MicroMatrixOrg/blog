<template>
  <div class="ueditor">
  <script :id=id type="text/plain" ></script>
    <!-- <div :id=id type="text/plain" ></div>    -->
  </div>
</template>

<script>
import "../../../static/UEditor/ueditor.config.js";
import "../../../static/UEditor/ueditor.all.js";
import "../../../static/UEditor/lang/zh-cn/zh-cn.js";
import "../../../static/js/jquery-1.9.1.min.js";

export default {
  name: "UEditor",
  props: {
    id: {
      type: String
    },
    config: {
      type: Object,
      default() {
        return {
          // 如果需要上传功能,找后端小伙伴要服务器接口地址
          // serverUrl: this.$config.baseUrl + 'ueditor/ueditorConfig',
          // serverUrl: "http://localhost:9527/ueditor/exec",
          serverUrl: APIConfig.UEditor.GetUEditor,
          // 你的UEditor资源存放的路径,相对于打包后的index.html
          // UEDITOR_HOME_URL: "/static/UEditor/", //本地
          UEDITOR_HOME_URL: "/gongju/static/UEditor/", //服务器
          // 编辑器不自动被内容撑高
          autoHeightEnabled: false,
          // 工具栏是否可以浮动
          autoFloatEnabled: false,
          // 初始容器高度
          initialFrameHeight: 240,
          // 初始容器宽度
          initialFrameWidth: "100%",
          // 关闭自动保存
          enableAutoSave: true
        };
      }
    },
    setContent: {
      type: String
    }
  },
  data() {
    return {
      editor: null
    };
  },
  mounted() {
    this.initUEContent();
  },
  destoryed() {
    this.editor.destory();
  },
  methods: {
    getUEContent: function() {
      const _this = this;
      _this.editor.addListener("ready", () => {
        return this.editor.getContent();
      });
    },
    getContentTxt: function() {},
    clearContentTxt() {
      let _this = this;
      _this.editor.setContent("");
    },
    initUEContent() {
      //初始化UE
      const _this = this;
      _this.editor = UE.delEditor(_this.id); //先删除之前实例的对象
      _this.editor = UE.getEditor(_this.id, _this.config); //添加编辑器
      _this.editor.addListener("ready", () => {
        if (typeof _this.setContent != "undefined") {
          //开放给需要在修改是渲染器原来的数据
          console.log(_this.setContent);
          _this.$emit("getContent", _this.setContent);
          _this.editor.setContent(_this.setContent); // 确保UE加载完成后，放入内容。
        }
        _this.editor.addListener("contentChange", () => {
          _this.$emit("getContent", _this.editor.getContent()); //内容发生变化，触发getContent事件，向父组件传值，此处是为了实现v-mode功能
        });
      });
    },
    setUEContent(string) {
      const _this = this;
      _this.editor.addListener("ready", () => {
        _this.editor.setContent(string);
      });
    }
  }
};
</script>
