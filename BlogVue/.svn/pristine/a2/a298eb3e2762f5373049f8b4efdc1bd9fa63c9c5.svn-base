<template>
  <div class="main_container">
    <div class="path-nav" style="position: relative;">
      <div style="font-size: 18px;padding-top: 25px;">发布管理>发布</div>
    </div>
    <div style="padding:0px 35px 20px 35px;">
      <div style="line-height: 50px;display: flex;">
        <div style="width: 12%;">
          <span class="xinghao_style">*</span>
          <span class="prefix1">讨论主题:</span>
        </div>
        <div style="width: 88%;">
          <Input
            type="text"
            v-model="discName"
            placeholder="讨论主题"
            clearable
            maxlength="30"
            show-word-limit
            style="width:89.5%"
          />
          <Button type="primary" style="margin-left: 1.5%;" @click="selectDisc"
            >选择</Button
          >
        </div>
      </div>

      <div style="line-height: 60px;display: flex;">
        <div style="width: 12%;">
          <span class="xinghao_style">*</span>
          <span class="prefix1" style="margin-left: 26px;">学科:</span>
        </div>
        <div style="width: 88%;" class="select-element">
          <Select
            v-model="subjectId"
            placeholder="请选择学科"
            style="width:200px;"
            @on-change="getNjByXk"
            clearable
          >
            <!-- <Option value="">全部学科</Option> -->
            <Option
              :value="item.subjectId"
              v-for="item in subjectList"
              :key="item.subjectId"
              >{{ item.subjectName }}</Option
            >
          </Select>
          <div style="display:inline-block;width:12%;margin-left:20px;">
            <span class="xinghao_style">*</span>
            年级:
          </div>
          <Select
            v-model="year"
            placeholder="请选择年级"
            style="width:200px;"
            @on-change="getTree"
            clearable
          >
            <!-- <Option value="">全部年级</Option> -->
            <Option
              :value="item.systemGrade"
              v-for="item in yearList"
              :key="item.id"
              >{{ item.gradeName }}</Option
            >
          </Select>
          <div style="display:inline-block;width:12%;margin-left:20px;">
            <!-- <span class="xinghao_style">*</span> -->
            知识章节:
          </div>
          <SelectTree
            ref="select"
            :value="discNode"
            :props="props"
            :options="courseList"
            @getValue="getValue($event)"
          />
        </div>
      </div>

      <div style="line-height: 60px;display: flex;">
        <div style="width: 12%;">
          <span class="xinghao_style">*</span>
          <span class="prefix1">发布对象:</span>
        </div>
        <div style="width: 88%;">
          <RadioGroup v-model="releObject">
            <Radio label="班级"></Radio>
            <Radio label="课堂"></Radio>
          </RadioGroup>
        </div>
      </div>
      <div style="line-height: 60px;display: flex;" v-if="releObject == '班级'">
        <div style="width: 12%;"></div>
        <div style="width: 88%;">
          <div style="">
            <Checkbox
              :indeterminate="indeterminate"
              :value="checkAll"
              @click.prevent.native="handleCheckAll"
              >全选</Checkbox
            >
          </div>
          <CheckboxGroup
            v-model="checkAllGroup"
            @on-change="checkAllGroupChange"
          >
            <Checkbox
              v-for="(item, index) in releaseNjList"
              :key="index"
              :label="item.id"
              >{{ item.gradeName + item.name }}</Checkbox
            >
          </CheckboxGroup>
        </div>
      </div>
      <div style="line-height: 60px;display: flex;" v-if="releObject == '课堂'">
        <div style="width:12%"></div>
        <div style="width:88%">
          <Select v-model="ketang" style="width:370px;">
            <Option
              v-for="item in releaseKTList"
              :value="item.id"
              :key="item.id"
              >{{ item.name }}</Option
            >
          </Select>
        </div>
      </div>

      <div style="line-height: 60px;display: flex;">
        <div style="width: 12%;">
          <!-- <span class="xinghao_style">*</span> -->
          <span class="prefix1" style="margin-left: 16px;">发布时间:</span>
        </div>
        <div style="width: 88%;">
          <DatePicker
            type="datetime"
            v-model="pubDate"
            @on-change="getReDate"
            placeholder="请选择开始时间"
            format="yyyy-MM-dd HH:mm:ss"
            style="width: 250px"
          ></DatePicker>
        </div>
      </div>

      <div style="line-height: 60px;display: flex;">
        <div style="width: 12%;">
          <!-- <span class="xinghao_style">*</span> -->
          <span class="prefix1" style="margin-left: 16px;">截止时间:</span>
        </div>
        <div style="width: 88%;">
          <DatePicker
            type="datetime"
            @on-change="getdeadTime"
            v-model="deadTime"
            placeholder="请选择截止时间"
            format="yyyy-MM-dd HH:mm:ss"
            style="width: 250px"
          ></DatePicker>
        </div>
      </div>

      <div style="display: flex;">
        <div style="width: 12%;margin-top: 10px;">
          <!--            <span class="xinghao_style">*</span>-->
          <span class="prefix1" style="margin-left: 16px;">讨论内容:</span>
        </div>
        <div style="width: 88%;">
          <Input
            type="textarea"
            v-model="target"
            :rows="4"
            style="margin-top: 14px"
            maxlength="1000"
            show-word-limit
          />
        </div>
      </div>

      <div style="display: flex;">
        <div style="width: 12%;margin-top: 10px;">
          <!--            <span class="xinghao_style">*</span>-->
          <span class="prefix1" style="margin-left: 16px;">讨论文件:</span>
        </div>
        <div style="width: 88%;">
          <fileupload
            ref="fileUpload"
            @fileIds="getFileIds"
            @isUpload="isEnable"
          ></fileupload>
        </div>
      </div>

      <div style="margin-top: 25px;margin-left: 37%;">
        <Button
          type="primary"
          style="width:90px;"
          @click="submit()"
          id="submitButton"
          :disabled="isComplete"
          >确认</Button
        >
        <Button
          type="default"
          style="width:90px;margin-left: 5%;"
          @click="cancle()"
          >取消</Button
        >
      </div>
    </div>

    <Modal
      v-model="selectLessonModal"
      @on-visible-change="getSLMchangge"
      title="选择讨论"
      class="lesson-select"
    >
      <div class="lesson-pre">
        <ul>
          <li style="background-color: #f9f9f9;">
            <span>请选择以下已创建好的讨论</span>
          </li>
          <li style="width: 100%;padding-left: 15px;">
            <RadioGroup v-model="selectDiscId">
              <Radio
                v-for="(item, index) in discList"
                :key="index"
                :label="item.id"
                >{{ item.name }}</Radio
              >
            </RadioGroup>
          </li>
        </ul>
      </div>

      <div slot="footer" style="margin-right: 35%;">
        <Button type="primary" style="width:90px;" @click="getselectDisc"
          >确认</Button
        >
        <Button
          type="default"
          style="width:90px;margin-left: 5%;"
          @click="cancleDisc"
          >取消</Button
        >
      </div>
    </Modal>
  </div>
</template>

<script>
import SelectTree from "@/components/ztree/treeSelect.vue";
import fileupload from "@/components/fileupload/fileupload.vue";
export default {
  data() {
    return {
      props: {
        // 配置项（必选）
        value: "id",
        label: "name",
        children: "child"
        // disabled:true
      },

      classList: [],

      pubDate: "", //发布时间
      deadTime: "", //截止时间

      selectLessonModal: false,
      discList: [], //讨论列表
      selectDiscId: 0,

      discName: "",

      subjectId: "",
      subjectList: [],
      gradeId: "",

      yearList: [],

      target: "",

      releObject: "班级",
      indeterminate: true,
      checkAll: false,
      checkAllGroup: [],

      isDisable: false,
      uploadFile: [],
      courseList: [],
      uniqueNjList: [],
      releaseNjList: [],
      releaseKTList: [],
      ketang: "",
      searchKetang: "",
      searchyear: "",
      ketangList: "",
      releaseObj: {},
      year: "",

      selectDiscObj: null, //选中的讨论
      tClassAndCourse: null, //该教师的班级和课堂
      discNode: 0, //讨论中的知识章节
      selectZszj: null, //选择的知识章节

      isComplete: false
    };
  },
  created: function() {},
  components: {
    SelectTree,
    fileupload
  },
  mounted() {
    const _this = this;
    _this.getDiscussionList();
    _this.getsubjectList();
    _this.getUserNewestPublishtion();
  },
  methods: {
    getSLMchangge(flag) {
      const _this = this;
      // console.log(flag);
      if (flag) {
        this.ketang = "";
        this.checkAllGroup = [];
      }
    },
    cancle() {
      const _this = this;
      _this.$emit("returnFlag", false);
    },
    getdeadTime(value) {
      const _this = this;
      let deadtime = new Date(value);
      let pubtime = 0;
      if (_this.pubDate == "") {
        pubtime = new Date();
        _this.pubDate = pubtime;
        // _this.$Message.info("发布日期未选择将默认为当前时刻");
      } else {
        pubtime = new Date(_this.pubDate);
      }
      if (deadtime.getTime() - pubtime.getTime() < 0) {
        _this.$Message.info("截止日期晚于发布日期前");
      }
      this.deadTime = value;
    },
    getReDate(value) {
      const _this = this;
      _this.pubDate = value;
    },

    submit() {
      const _this = this;
      _this.isComplete = true;
      if (_this.discName == "") {
        _this.isComplete = false;
        _this.$Message.info("请填写讨论主题");
        return;
      }
      if (_this.subjectId == "" || typeof _this.subjectId == "undefined") {
        _this.isComplete = false;
        _this.$Message.info("请选择学科");
        return;
      }
      if (_this.year == "" || typeof _this.year == "undefined") {
        _this.isComplete = false;
        _this.$Message.info("请选择年级");
        return;
      }

      if (_this.deadTime != "" && _this.pubDate == "") {
        _this.isComplete = false;
        _this.$Message.info("发布日期未填写，将自动默认为当前时间");
        _this.pubDate = new Date();
        return;
      }
      if (
        new Date(_this.deadTime).getTime() - new Date(_this.pubDate).getTime() <
        0
      ) {
        _this.isComplete = false;
        _this.$Message.info("截止日期不能早于发布日期");
        return;
      }
      let temSubList = _this.subjectList.filter(item => {
        return item.subjectId == _this.subjectId;
      });
      let temSub = temSubList[0];
      let temGradeList = _this.yearList.filter(item => {
        return item.systemGrade == _this.year;
      });
      let temGrade = temGradeList[0];
      console.log(temGrade);
      let temNames = [];
      let temclassIds = [];
      let temObj = [];
      if (_this.releObject == "班级") {
        if (_this.checkAllGroup.length == 0) {
          _this.isComplete = false;
          _this.$Message.info("请选择发布对象");
          return;
        }
        let temClasses = _this.releaseNjList.filter(item => {
          if (_this.checkAllGroup.includes(item.id)) {
            temNames.push(item.name);
            temclassIds.push(item.id);
            return true;
          } else {
            return false;
          }
          // return _this.checkAllGroup.includes(item.id);
        });
        temNames = temNames.join(",");
        temclassIds = temclassIds.join(",");
      } else {
        if (_this.ketang == "") {
          _this.isComplete = false;
          _this.$Message.info("请选择发布对象");
          return;
        }
        temObj = _this.ketangList.filter(item => {
          return item.id == _this.ketang;
        });
        temNames = temObj[0].pubObjName;
        temclassIds = temObj[0].pubObjId;
      }

      let params = {
        gradeId: +temGrade.systemGrade,
        gradeName: temGrade.gradeName,

        subId: temSub.sub_id,
        subjectName: temSub.subjectName,
        content: _this.target,
        chapterId: _this.selectZszj ? _this.selectZszj.id : null,
        chapterName: _this.selectZszj ? _this.selectZszj.name : null,
        name: _this.discName,
        fileIds: _this.uploadFile.join(","),
        deadline: _this.deadTime,
        publishDate: _this.pubDate,
        classIds: temclassIds,
        classNames: temNames,
        courseId: temObj.length > 0 ? temObj[0].id : null,
        courseName: temObj.length > 0 ? temObj[0].name : null
      };
      console.log(params);
      _this.$api.post(APIConfig.Discussion.addPubDiscussion, params, resp => {
        if (resp.code == 0) {
          _this.clearParams();
          _this.$emit("returnFlag", false);
          _this.isComplete = false;
        } else {
          _this.$Message.info(resp.msg);
        }
      });
    },
    clearParams() {
      const _this = this;
      _this.subjectId = "";
      _this.year == "";
      _this.$refs.select.init();
      _this.discName = "";
      _this.releObject = "班级";
      _this.checkAllGroup = [];
      _this.ketang = null;
      _this.pubDate = "";
      _this.deadTime = "";
      _this.selectDiscObj = null;
      _this.selectZszj = null;
    },
    getTree(value) {
      const _this = this;
      _this.courseList = [];
      let temxk = "";
      let temgrade = "";

      this.$refs.select.init();
      if (typeof value == "undefined") {
        // this.$refs.select.init();
        // _this.searchyear = "";
        return;
      }

      if (typeof value != "undefined") {
        _this.releaseNjList = _this.uniqueNjList.filter(item => {
          return value == item.systemGrade;
        });
        _this.releaseKTList = _this.ketangList.filter(item => {
          return value == item.pubLesson.grade;
        });
        console.log(_this.releaseKTList);
      } else {
        _this.releaseKTList = [..._this.ketangList];
        _this.releaseNjList = [..._this.uniqueNjList];
        // _this.searchyear = "";
      }

      for (let i = 0; i < _this.subjectList.length; i++) {
        // console.log(_this.subjectList[i]);
        if (_this.subjectList[i].subjectId == _this.subjectId) {
          temxk = _this.subjectList[i].sub_id;
          _this.subId = _this.subjectList[i].sub_id;
        }
      }
      // console.log(value);

      var params = {
        grade: value,
        subId: temxk
      };

      _this.$api.get(APIConfig.Zszj.GetTree, params, resp => {
        if (resp.code == 0) {
          if (resp.data.tree) {
            for (let i = 0; i < resp.data.tree.child.length; i++) {
              _this.courseList.push(resp.data.tree.child[i]);
            }
            if (_this.selectDiscObj) {
              _this.$nextTick(() => {
                _this.discNode = _this.selectDiscObj.chapterId;
              });
            }
          }
        }
      });
    },
    getNjByXk(value) {
      //选择了学科 >出现年级列表
      console.log("获取年级fabu", value);
      const _this = this;
      _this.yearList = [];
      _this.courseList = [];
      if (typeof value != "undefined") {
        if (_this.selectDiscObj) {
          // console.log("我进来了");
          _this.year = _this.selectDiscObj.gradeId;
          _this.getTree(_this.year);
        }
      } else {
        _this.year = null;
      }
      // console.log("选择的学科", value);
      // console.log("选择的学科", _this.tClassAndCourse);
      for (let i = 0; i < _this.tClassAndCourse.length; i++) {
        let temNj = {
          id: _this.tClassAndCourse[i].id,
          subjectName: _this.tClassAndCourse[i].subjectName,
          subjectId: _this.tClassAndCourse[i].subjectId,
          gradeId: _this.tClassAndCourse[i].gradeId,
          gradeName: _this.tClassAndCourse[i].gradeName,
          name: _this.tClassAndCourse[i].name,
          sub_id: _this.tClassAndCourse[i].sub_id,
          systemGrade: _this.tClassAndCourse[i].systemGrade,
          systemId: _this.tClassAndCourse[i].systemId,
          schoolId: _this.tClassAndCourse[i].schoolId
        };
        // console.log(temNj);
        if (
          temNj.subjectId == value &&
          _this.yearList.findIndex(x => x.systemGrade == temNj.systemGrade) ==
            -1
        ) {
          _this.yearList.push(temNj);
        }
      }
      if (typeof value != "undefined") {
        for (let i = 0; i < _this.subjectList.length; i++) {
          // console.log(_this.subjectList[i]);
          if (_this.subjectList[i].subjectId == _this.subjectId) {
            _this.subId = _this.subjectList[i].sub_id;
            break;
          }
        }
      } else {
        _this.subId = "";
      }
    },
    getUserNewestPublishtion() {
      const _this = this;
      _this.$api.get(
        APIConfig.DiscussionLibrary.GetUserNewestPublishtion,
        {},
        resp => {
          if (resp.code == 0) {
            _this.ketangList = resp.data;
            _this.releaseKTList = resp.data;
          } else {
            _this.$Message.info(resp.msg);
          }
        }
      );
    },
    getsubjectList() {
      const _this = this;
      _this.$api.get(
        APIConfig.ClassAndCourse.GetTeacherClassAndCourse,
        {},
        resp => {
          if (resp.code == 0) {
            this.tClassAndCourse = [...resp.data];
            for (let i = 0; i < this.tClassAndCourse.length; i++) {
              let temNj = {
                subjectName: _this.tClassAndCourse[i].subjectName,
                subjectId: _this.tClassAndCourse[i].subjectId,
                gradeId: _this.tClassAndCourse[i].gradeId,
                gradeName: _this.tClassAndCourse[i].gradeName,
                name: _this.tClassAndCourse[i].name,
                sub_id: _this.tClassAndCourse[i].sub_id,
                systemGrade: _this.tClassAndCourse[i].systemGrade,
                systemId: _this.tClassAndCourse[i].systemId,
                schoolId: _this.tClassAndCourse[i].schoolId,
                id: _this.tClassAndCourse[i].id
              };
              if (
                _this.subjectList.findIndex(
                  x => x.subjectId == temNj.subjectId
                ) == -1
              ) {
                _this.subjectList.push(temNj);
              }

              if (_this.uniqueNjList.findIndex(x => x.id == temNj.id) == -1) {
                _this.releaseNjList.push(temNj);
                _this.uniqueNjList.push(temNj);
              }
            }
          }
        }
      );
    },
    getDiscussionList() {
      const _this = this;
      _this.$api.get(
        APIConfig.DiscussionLibrary.GetMyDiscussionLibraryByKeyword,
        {
          gradeId: "",
          subId: "",
          chapterId: "",
          createDate: "",
          name: "",
          page: 0,
          size: 40
        },
        resp => {
          if (resp.code == 0) {
            _this.discList = [...resp.data.discussionLibrary];

            // _this.miTotalTea = +resp.data.totalElements;
          }
        }
      );
    },
    getselectDisc() {
      const _this = this;
      _this.selectDiscObj =
        _this.discList[
          _this.discList.findIndex(x => x.id == _this.selectDiscId)
        ];
      _this.selectLessonModal = false;

      for (let i = 0; i < _this.subjectList.length; i++) {
        // console.log(_this.subjectList[i]);
        if (_this.subjectList[i].sub_id == _this.selectDiscObj.subId) {
          _this.subjectId = _this.subjectList[i].subjectId;
          break;
        }
      }
      // console.log(_this.selectDiscObj);
      _this.getNjByXk(_this.subjectId);
      _this.discName = _this.selectDiscObj.name;
    },
    cancleDisc() {
      this.selectLessonModal = false;
      for (let key in this.selectDiscObj) {
        delete this.selectDiscObj[key];
      }
      this.selectDiscObj = null;
      // console.log(this.selectDiscObj);
    },
    selectDisc() {
      const _this = this;
      _this.selectLessonModal = true;
    },
    isEnable(flag) {
      this.isDisable = flag;
    },
    getFileIds(fileIds) {
      this.uploadFile = [...fileIds];
      // console.log(this.uploadFile);
    },
    getValue(value) {
      this.selectZszj = value;
      this.selectLessonModal = false;
      // console.log("选择的", this.selectZszj);
    },
    handleCheckAll() {
      if (this.indeterminate) {
        this.checkAll = false;
      } else {
        this.checkAll = !this.checkAll;
      }
      this.indeterminate = false;

      if (this.checkAll) {
        for (let i = 0; i < this.releaseNjList.length; i++) {
          this.checkAllGroup.push(this.releaseNjList[i].id);
        }
        // console.log("this.checkAllGroup ", this.checkAllGroup);
      } else {
        this.checkAllGroup = [];
      }
    },
    checkAllGroupChange(data) {
      if (data.length === this.releaseNjList.length) {
        this.indeterminate = false;
        this.checkAll = true;
      } else if (data.length > 0) {
        this.indeterminate = true;
        this.checkAll = false;
      } else {
        this.indeterminate = false;
        this.checkAll = false;
      }
    }
  }
};
</script>
<style lang="scss">
.path-nav {
  height: 80px;
  box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.1);
  background: #fff;
  width: 100%;
  padding: 0 15px;
  box-sizing: border-box;
  min-width: 767px;
}

.ivu-tabs-tab {
  font-size: 18px;
  width: 130px;
  text-align: center;
}

.pub-modal {
  .ivu-modal {
    width: 900px !important;
  }

  #TestDiv1 {
    max-height: 500px;
    overflow: scroll;
  }
}

.xinghao_style {
  content: "*";
  display: inline-block;
  margin-right: 4px;
  line-height: 1;
  font-family: SimSun;
  font-size: 12px;
  color: #ed4014;
}

.prefix1 {
  /*margin-left: 20px;*/
  font-size: 16px;
  font-weight: 500;
}

.mt10 {
  margin-top: 10px;
}

.info-item {
  margin-left: 10%;
}

.info-item ul > li {
  line-height: 40px;
}

/*.classList .ivu-checkbox-inner{*/
/*  display: none;*/
/*}*/

/*.classList .ivu-checkbox-wrapper {*/
/*  background-color: #f1f1f1;*/
/*  width: 80px;*/
/*  text-align: center;*/
/*  border-radius: 3px;*/
/*}*/
/*.classList .ivu-checkbox-wrapper-checked {*/
/*  background-color: #c8d9f7;*/
/*  width: 80px;*/
/*  text-align: center;*/
/*  border-radius: 3px;*/
/*}*/
.classList {
  background-color: #f8f8f8;
  padding: 0px 10px;
  border-radius: 5px;
}

.lesson-select {
  .ivu-modal {
    width: 900px !important;
    height: 648px !important;
  }
}

.lesson-pre ul > li {
  line-height: 40px;
}

.lesson-pre .ivu-radio-group {
  width: 100%;
}

.lesson-pre > ul > li .ivu-radio-group-item:nth-child(even) {
  background-color: #f9f9f9;
}

.lesson-pre .ivu-radio-group-item {
  width: 100% !important;
}

.lesson-pre .ivu-radio {
  margin-right: 10px;
}

.select-element {
  .ivu-select-single .ivu-select-selection {
    height: 40px !important;
  }

  .ivu-select-placeholder {
    line-height: 40px !important;
  }

  .ivu-select-selected-value {
    line-height: 40px !important;
  }
}

.mission {
  margin-top: 20px;
  border: 1px solid #f1f1f1;
  border-radius: 3px;

  .ivu-tabs-ink-bar {
    top: 1px;
    bottom: 0px;
    width: 110px !important;
    margin-left: 10px !important;
  }

  .ivu-tabs-bar {
    border-bottom: none;
    /*margin: 5px 0px 0px 20px;*/
  }

  .ivu-tabs-nav .ivu-tabs-tab {
    line-height: 50px;
    padding: 0px;
    font-size: 16px;
  }

  .ivu-tabs-nav .ivu-tabs-tab-active {
    background-color: #ffffff;
  }

  .ivu-tabs-nav-wrap {
    margin-bottom: 0px;
  }
}

.list-item {
  border: 1px solid #f1f1f1;
  border-radius: 3px;
  padding: 5px 10px;
  margin-bottom: 10px;
  display: flex;
  position: relative;
  height: 58px;
}

.item-icon {
  position: absolute;
  /*right: 55px;*/
  text-align: center;
  cursor: pointer;
}

.upload-content {
  /*position: absolute;*/
  margin-left: 39%;
  margin-bottom: 5%;
}

.upload-content .ivu-upload {
  float: left;
}

.upload-content .ivu-btn {
  border: none;
}

.select-element {
  .ivu-select-single .ivu-select-selection {
    height: 40px !important;
  }

  .ivu-select-placeholder {
    line-height: 40px !important;
  }

  .ivu-select-selected-value {
    line-height: 40px !important;
  }
}

.tab-box {
  padding: 15px;
  min-height: 400px;
  position: relative;

  .no-add-res {
    position: absolute;
    width: 220px;
    height: 220px;
    background-size: 220px;
    left: 35%;
    top: 70px;
  }
}
</style>
