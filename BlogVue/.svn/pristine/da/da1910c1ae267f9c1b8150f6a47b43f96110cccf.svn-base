<template>
  <div>
    <!-- 调用树形下拉框组件 -->
    <SelectTree
      :props="props"
      :options="optionData"
      :value="valueId"
      :clearable="isClearable"
      :accordion="isAccordion"
      @getValue="getValue($event)"
      ref="s"
    />
  </div>
</template>

<script>
import SelectTree from "@/components/ztree/treeSelect.vue";

export default {
  props: {
    valueId: { type: Number, default: 1 },
    list: { type: Array }
  },
  name: "app",
  components: {
    SelectTree
  },

  data() {
    return {
      isClearable: false, // 可清空（可选）
      isAccordion: true, // 可收起（可选）
      props: {
        // 配置项（必选）
        value: "id",
        label: "name",
        children: "child"
      }
    };
  },
  mounted() {
    // console.log(this.valueId);
    // this.valueId = 1;
  },
  computed: {
    /* 转树形数据 */
    optionData() {
      let cloneData = JSON.parse(JSON.stringify(this.list)); // 对源数据深度克隆
      return cloneData.filter(father => {
        // 循环所有项，并添加children属性
        let branchArr = cloneData.filter(child => father.id == child.parentId); // 返回每一项的子级数组
        branchArr.length > 0 ? (father.children = branchArr) : ""; //给父级添加一个children属性，并赋值
        return father.parentId == 0; //返回第一层
      });
    }
  },
  watch: {
    valueId(val) {
      if (val == "") {
        this.$refs.s.init(val);
      }
    }
  },
  methods: {
    // 取值
    init(list, id) {
      this.list = [list];
      this.valueId = id;
      this.$refs.s.init(id);
    },
    getValue(value) {
      this.valueId = value;
      this.$emit("on-ok", this.valueId);
    }
  }
};
</script>

<style>
.el-input__inner {
  height: 34px;
}
.el-select {
  width: 100%;
  line-height: 60px;
}
</style>
