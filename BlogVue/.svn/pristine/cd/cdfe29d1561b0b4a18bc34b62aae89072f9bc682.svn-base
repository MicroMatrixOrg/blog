import Vue from 'vue';
import Vuex from 'vuex';

import getters from './getters';
import mutations from './mutations';
import actions from './actions';

Vue.use(Vuex);

const state = {
  listPagePars: new Map(),//各个页面分页的状态集合
  lisPathSys: new Map(),//左侧模块数据
};

export default new Vuex.Store({
  state: {
    isAddPaper: false,
    quesbasket: [
      { type: "1", name: "单选题", list: [], length: 0 },
      { type: "2", name: "多选题", list: [], length: 0 },
      { type: "3", name: "判断题", list: [], length: 0 },
      { type: "4", name: "主观题", list: [], length: 0 },
      { type: "5", name: "阅读理解", list: [], length: 0 }
    ],
    mission: {},//存的是跳转到查看页面记录的数据
    student: {},
    classList: {},
    courList: {},
    curUser: {},
    myMission: {},
    groupList: {},

    //新版的页面
    teaEditMission: {},
    teaCurIndex: "",//老师正在批改哪个班级

    someoneTeacher: {},//记录点击的是哪个教师（统计-》作业统计-》年级详情-》班级-》教师）
    searchDate: {}
  },
  getters: {
    getFlag: state => {
      return state.isAddPaper;
    },
    getques: state => {
      return state.quesbasket;
    },
    getMission: state => {
      return state.mission
    },
    getStudent: state => {
      return state.student
    },
    getClassList: state => {
      return state.classList
    },
    getCourseList: state => {
      return state.courList
    },
    getcurUser: state => {
      return state.curUser

    },
    getMyMission: state => {
      return state.myMission

    },
    getGroupList: state => {
      return state.groupList

    },

    //新版
    getTeaEditMiss: state => {
      return state.teaEditMission;
    },

    getTeaCurIndex() {
      return state.getTeaCurIndex;
    },

    getSomeoneTeacher() {
      return state.someoneTeacher;
    },

    getSearchDate() {
      return state.searchDate;
    }
  },
  mutations: {
    setDate(state, val) {
      state.searchDate = val;
      localStorage.setItem("searchDate", JSON.stringify(state.searchDate));
    },
    setSomeoneTeacher(state, val) {
      state.someoneTeacher = val;
      localStorage.setItem("someoneTeacher", JSON.stringify(state.someoneTeacher));
    },

    setTeaCurIndex(state, index) {
      state.teaCurIndex = index;
      localStorage.setItem("teaCurIndex", JSON.stringify(state.teaCurIndex));
    },

    setTeaEditMiss(state, mission) {
      state.teaEditMission = mission;
      localStorage.setItem("teaEditMission", JSON.stringify(state.teaEditMission));
    },

    //旧版
    setMission(state, missionInfo) {
      state.mission = missionInfo;
      localStorage.setItem("mission", JSON.stringify(state.mission));
    },
    setStudent(state, stuInfo) {
      state.student = stuInfo;
      localStorage.setItem("student", JSON.stringify(state.student));
    },
    setClassList(state, classList) {
      state.classList = classList;
      localStorage.setItem("classList", JSON.stringify(state.classList));
    },
    setCourseList(state, courseList) {
      state.courList = courseList;
      localStorage.setItem("courseList", JSON.stringify(state.courList));
    },
    setcurUser(state, curUser) {
      state.curUser = curUser;
      localStorage.setItem("curUser", JSON.stringify(state.curUser));
    },
    setMyMission(state, myMission) {
      state.myMission = myMission;
      localStorage.setItem("myMission", JSON.stringify(state.myMission));
    },
    setGroupList(state, groupList) {
      state.groupList = groupList;
      localStorage.setItem("groupList", JSON.stringify(state.groupList));
    },
    changeFlag(state, payload) {
      state.isAddPaper = payload.status;
    },
    addTobasket(state, object) {
      if (object.type == '1') {
        let index = state.quesbasket[0].list.findIndex(x => x.id == object.id);
        if (index == -1) {
          state.quesbasket[0].list.push(object);
          state.quesbasket[0].length++;
        }
      } else if (object.type == '2') {
        let index = state.quesbasket[1].list.findIndex(x => x.id == object.id);
        if (index == -1) {
          state.quesbasket[1].list.push(object);
          state.quesbasket[1].length++;
        }
      } else if (object.type == '3') {
        let index = state.quesbasket[2].list.findIndex(x => x.id == object.id);
        if (index == -1) {
          state.quesbasket[2].list.push(object);
          state.quesbasket[2].length++;
        }

      } else if (object.type == '4') {
        let index = state.quesbasket[3].list.findIndex(x => x.id == object.id);
        if (index == -1) {
          state.quesbasket[3].list.push(object);
          state.quesbasket[3].length++;
        }

      } else if (object.type == '5') {
        let index = state.quesbasket[4].list.findIndex(x => x.id == object.id);
        if (index == -1) {
          state.quesbasket[4].list.push(object);
          state.quesbasket[4].length++;
        }
      } else {
        return "数据不匹配"
      }
    }
  },
  actions
});