<template>
    <div class="main-box">
        <div class="main-content">
            <ul>
                <li class="miss-li-from miss-li">
                    <span class="miss-title">知识章节:</span>
                    <div class="miss-content">
                        <Select v-model="xk" style="width:131px" placeholder="请选择学科" @on-change ="getNjByXk">
                           <Option v-for="item in xkList" :value="item.subjectId" :key="item.subjectId">{{  item.subjectName }}</Option>
                        </Select>
                        <Select v-model="nj" style="width:131px"  placeholder="请选择年级" @on-change="getTree">
                            <Option v-for="item in njList" :value="item.systemGrade" :key="item.id">{{ item.gradeName }}</Option>
                        </Select>
                        <SelectTree ref="select" :props="props" :options="courseList" @getValue="getValue($event)" />
                    </div>
                </li>
                <li class="miss-li-from">
                    <span class="miss-title">讨论主题:</span>
                    <div class="miss-content">
                        <Input v-model="missionTitle" maxlength="30" show-word-limit placeholder="请输入讨论主题" />
                    </div>
                </li>
                <li class="miss-li-from" style="border-bottom:none;">
                    <span class="miss-title-no">讨论内容:</span>
                    <div class="miss-content">
                      <Input v-model="disContent" maxlength="1000" show-word-limit type="textarea"  :autosize="{minRows: 5,maxRows: 6}" placeholder="请输入讨论内容"  />
                    </div>
                </li>
                <li class="miss-li-from" style="border-bottom:none;">
                    <span class="miss-title-no">讨论文件:</span>
                    <div class="miss-content">
                      <fileupload ref="fileUpload" @fileIds="getFileIds"  @isUpload="isEnable"></fileupload>
                    </div>
                </li>
                <li class="miss-li-end">
                  <Button type="primary" style="margin-right:44px;" @click=" adDiscussion()" :disabled="isDisable">确认</Button>
                  <Button @click="onCancle()">取消</Button>
                </li>
            </ul>
        </div>
    </div>
</template>

<script>
import UEditor from "@/components/ueditor/ueditor.vue";
import SelectTree from "@/components/ztree/treeSelect.vue";
import fileupload from "@/components/fileupload/fileupload.vue";

export default {
  components: {
    UEditor,
    SelectTree,
    fileupload
  },
  data() {
    return {
      missionTitle: "",

      props: {
        // 配置项（必选）
        value: "id",
        label: "name",
        children: "child"
        // disabled:true
      },
      courseList: [],
      zsList: [],
      xkList: [],
      njList: [],
      zszjList: [],
      xk: "",
      nj: "",
      zszj: "",
      isDisable: false,

      uploadFile: [],
      disContent: "" //讨论的内容
    };
  },
  mounted() {
    this.groupSet();
  },
  methods: {
    isEnable(flag) {
      this.isDisable = flag;
    },
    getFileIds(fileIds) {
      this.uploadFile = [...fileIds];
      // console.log(this.uploadFile);
    },
    //添加任务
    adDiscussion() {
      const _this = this;
      _this.isDisable = true;
      // let flag = _this.$refs.fileUpload.upload();

      // if (!flag) {
      //   _this.$Message.info("文件上传失败");
      //   _this.isDisable = false;
      //   return;
      // }
      console.log(this.uploadFile);

      if (_this.xk == "") {
        _this.$Message.info("学科未选择");
        _this.isDisable = false;
        return;
      }
      if (_this.nj == "") {
        console.log("年级未选择");
        _this.$Message.info("年级未选择");
        _this.isDisable = false;
        return;
      }
      if (_this.selectZszj == null || _this.selectZszj == "") {
        console.log("知识点未选择");
        _this.$Message.info("知识点未选择");
        _this.isDisable = false;
        return;
      }

      if (_this.missionTitle == "" || _this.missionTitle == undefined) {
        _this.$Message.info("讨论主题不能为空");
        _this.isDisable = false;
        return;
      }

      // if (_this.disContent == "") {
      //   _this.$Message.info("讨论内容未填写");
      //   _this.isDisable = false;
      //   return;
      // }
      let temxk = {};
      let temnj = {};

      temxk =
        _this.xkList[_this.xkList.findIndex(x => x.subjectId == _this.xk)];
      temnj =
        _this.njList[_this.njList.findIndex(x => (x.systemGrade = _this.nj))];

      let params = {
        name: _this.missionTitle,
        subId: temxk.sub_id,
        subjectName: temxk.subjectName,
        fileIds: _this.uploadFile.length == 0 ? "" : _this.uploadFile.join(","),
        chapterId: _this.selectZszj.id,
        content: _this.disContent,
        //知识章节名
        chapterName: _this.selectZszj.name,
        gradeName: temnj.gradeName,
        gradeId: temnj.systemGrade
      };
      console.log("添加", params);
      _this.$api.post(
        APIConfig.DiscussionLibrary.AddDisLibrary,
        params,
        resp => {
          if (resp.code == 0) {
            _this.$Message.info("添加任务成功");
            setTimeout(() => {
              this.$emit("on-cancle", true);
            }, 1000);
          } else {
            _this.$Message.info("添加任务失败");
          }
        },
        resp => {
          _this.$Message.info("添加任务失败");
        }
      );
    },

    onCancle() {
      this.missionTitle = "";

      this.courseList = [];
      this.zsList = [];
      this.xkList = [];
      this.njList = [];
      this.zszjList = [];
      this.xk = "";
      this.nj = "";
      this.zszj = "";
      this.$refs.select.init();
      this.$emit("on-cancle", true);
    },
    groupSet(value) {
      const _this = this;
      _this.$api.get(
        APIConfig.ClassAndCourse.GetTeacherClassAndCourse,
        {},
        function(resp) {
          if (resp.code == 0) {
            _this.zsList = resp.data;
            _this.$nextTick(() => {
              for (let i = 0; i < _this.zsList.length; i++) {
                let temxk = {
                  subjectName: _this.zsList[i].subjectName,
                  subjectId: _this.zsList[i].subjectId,
                  gradeId: _this.zsList[i].gradeId,
                  gradeName: _this.zsList[i].gradeName,
                  name: _this.zsList[i].name,
                  sub_id: _this.zsList[i].sub_id,
                  systemGrade: _this.zsList[i].systemGrade,
                  systemId: _this.zsList[i].systemId,
                  schoolId: _this.zsList[i].schoolId
                };
                // console.log(temxk);
                // console.log(_this.xkList);

                if (
                  _this.xkList.findIndex(
                    x => x.subjectId == _this.zsList[i].subjectId
                  ) == -1
                ) {
                  _this.xkList.push(temxk);
                }
                // _this.getnj();
              }
            });
          }
        }
      );
    },
    getValue(value) {
      this.selectZszj = value;
      console.log("选择的", this.selectZszj);
    },
    getTree(value) {
      const _this = this;
      _this.courseList = [];
      _this.$refs.select.init();
      let temxk = "";
      let temgrade = "";
      // for (let i = 0; i < _this.njList.length; i++) {
      //   if (_this.njList[i].id == _this.nj) {
      //     temgrade = _this.njList[i].systemGrade;
      //   }
      // }
      for (let i = 0; i < _this.xkList.length; i++) {
        // console.log(_this.xkList[i]);
        if (_this.xkList[i].subjectId == _this.xk) {
          temxk = _this.xkList[i].sub_id;
          _this.subId = _this.xkList[i].sub_id;
        }
      }
      console.log(value);
      if (typeof value == "undefined") {
        return;
      }
      var params = {
        grade: value,
        subId: temxk
      };

      // console.log("	_this.courseList抓话后", _this.courseList);
      _this.$api.get(APIConfig.Zszj.GetTree, params, resp => {
        if (resp.code == 0) {
          if (resp.data.tree != null) {
            for (let i = 0; i < resp.data.tree.child.length; i++) {
              _this.courseList.push(resp.data.tree.child[i]);
            }
          }
          // console.log(resp);
          // let temData = [];
          // temData.push(resp.data.tree);
          // // _this.flat(temData);
          // _this.$set(_this.courseList, 0, temData);
          // _this.courseList = temData;
          // console.log(_this.courseList);

          // _this.courseList = resp.data;
        }
      });
    },
    getnj() {
      const _this = this;
      for (let i = 0; i < _this.zsList.length; i++) {
        let temNj = {
          subjectName: _this.zsList[i].subjectName,
          subjectId: _this.zsList[i].subjectId,
          gradeId: _this.zsList[i].gradeId,
          gradeName: _this.zsList[i].gradeName,
          name: _this.zsList[i].name,
          sub_id: _this.zsList[i].sub_id,
          systemGrade: _this.zsList[i].systemGrade,
          systemId: _this.zsList[i].systemId,
          schoolId: _this.zsList[i].schoolId,
          id: _this.zsList[i].id
        };
        if (_this.uniqNjList.findIndex(x => x.id == temNj.id) == -1) {
          _this.uniqNjList.push(temNj);
        }
      }
    },

    getNjByXk(value) {
      //选择了学科 >出现年级列表
      const _this = this;
      _this.njList = [];
      _this.courseList = [];
      _this.nj = "";
      // console.log("选择的学科", value);
      // console.log("选择的学科", _this.zsList);
      for (let i = 0; i < _this.zsList.length; i++) {
        let temNj = {
          id: _this.zsList[i].id,
          subjectName: _this.zsList[i].subjectName,
          subjectId: _this.zsList[i].subjectId,
          gradeId: _this.zsList[i].gradeId,
          gradeName: _this.zsList[i].gradeName,
          name: _this.zsList[i].name,
          sub_id: _this.zsList[i].sub_id,
          systemGrade: _this.zsList[i].systemGrade,
          systemId: _this.zsList[i].systemId,
          schoolId: _this.zsList[i].schoolId
        };
        if (
          temNj.subjectId == value &&
          _this.njList.findIndex(x => x.systemGrade == temNj.systemGrade) == -1
        ) {
          _this.njList.push(temNj);
        }
      }
    }
  }
};
</script>


<style lang="scss" scoped>
.main-content > ul {
  padding: 0 65px;
}

.miss-li {
  padding: 14px 0 36px 0 !important;
}

.miss-li-end {
  display: flex;
  padding: 36px 0;
  justify-content: center;
}

.miss-li-from {
  display: flex;
  padding: 36px 0;
  border-bottom: 1px solid #e7e7e7;
}

.miss-title {
  width: 153px;
  text-align: left;
  font-size: 16px;
}

.miss-title:first {
  //   padding: 12px 0;
}
.miss-title::before {
  content: "*";
  color: #ed4014;
  margin: 0 20px 0 0;
  vertical-align: middle;
}
.miss-content {
  display: inline-block;
  width: calc(100% - 136px);
  // overflow: auto;
}
.miss-title-no {
  width: 153px;
  text-align: left;
  font-size: 16px;
  padding-left: 30px;
}
* /deep/ .el-input__inner {
  height: 32px;
  line-height: 32px;
  vertical-align: middle;
}

* /deep/ .ivu-select-dropdown {
  max-height: 150px;
}
</style>
